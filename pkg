#!/usr/bin/env lua

function execute(command)
	local pipe = assert(io.popen(command))
	local result = assert(pipe:read("*a"))
	pipe:close()
	return result
end

function detect_system(config_data)
	for program in pairs(config_data) do
		local exists = os.execute(string.format("command -v %s > /dev/null", program))

		if exists then
			return config_data[program]
		end
	end

	return nil
end

function search_with(search_command, info_command)
	return function(package_name)
		-- fzf configuration. The preview window (showing detailed information
		-- about a package) can be toggled with Ctrl+D
		local fzf = string.format([[
			fzf --multi \
				--ansi \
				--height=90%% \
				--layout=reverse \
				--bind=ctrl-d:toggle-preview \
				--preview-window=bottom:50%% \
				--preview='%s {+1}' \
				--header='%s'
			]], info_command, tr"Shortcuts" )

		local full_command =
			table.concat({search_command, package_name, "|", fzf}, " ")
		local result = execute(full_command)

		if not result or #result == 0 then
			return nil
		end

		local packages = {}

		for line in result:gmatch("[^\n]+") do
			packages[#packages+1] = line:match("[^ \\t]+")
		end

		print(tr("SelectedPackages", table.concat(packages, ", ")))
		print("")
		return packages
	end
end

function quit_with_search_term_not_provided(subcommand)
	local program_name = arg[0]:match("[^/]+$")
	io.stderr:write(tr("SearchTermNotProvided", program_name, subcommand))
	os.exit(3)
end

function programs(data)
	local commands = detect_system(data)
	if not commands then return end

	local search = search_with(commands.search, commands.details)
	local search_installed = search_with(commands.search_installed, commands.details)

	return {
		["install"] = function(name)
			if not name then
				quit_with_search_term_not_provided("install")
			end

			local packages = search(name)
			if not packages then return end

			os.execute(commands.install .. " " .. table.concat(packages, " "))
		end,

		["details"] = function(name)
			if not name then
				quit_with_search_term_not_provided("details")
			end

			local packages = search(name)
			if not packages then return end

			for _, package in ipairs(packages) do
				local heading = tr("InfoHeading", package)
				print(heading)
				print(string.rep("-", #heading))
				print("")
				assert(os.execute(commands.details .. " " .. package))
				print("")
			end
		end,

		["remove"] = function(name)
			if not name then
				quit_with_search_term_not_provided("remove")
			end

			local packages = search_installed(name)
			if not packages then return end

			os.execute(commands.remove .. " " .. table.concat(packages, " "))
		end,

		["no-orphans"] = function()
			if type(commands.no_orphans) == "table" then
				local result = execute(commands.no_orphans[1])

				if result and #result > 0 then
					os.execute(commands.no_orphans[2] .. " " .. result)
				end
			else
				os.execute(commands.no_orphans)
			end
		end,

		["update"] = function()
			os.execute(commands.update)
		end
	}
end

function detect_locale()
	local lang = os.getenv("LANG")
	return lang:match("[^.]+")
end

function translations(data)
	local locale = detect_locale()
	local translation_table = data[locale] or data["en_US"]

	return function(code, ...)
		return string.format(translation_table[code], ...)
	end
end

function config(data)
	return data[1], data[2]
end

program, tr = config {
	programs {
		-- Use long-named flags whenever possible to improve readability
		eopkg = {
			-- Search for packages not installed in your system
			search = "eopkg search",
			-- Search for packages already installed in your system
			search_installed = "eopkg search --installdb",
			-- Get detailed information about packages
			details = "eopkg info",
			-- Install a package
			install = "eopkg install",
			-- Remove a package
			remove = "eopkg remove",
			-- Remove orphans
			no_orphans = "eopkg remove-orphans",
			-- Search for updates in the installed packages and install them
			update = "eopkg upgrade"
		},
		apt = {
			search = "apt-cache search",
			search_installed = "dpkg --show --showformat='${Package} ${binary:Sumary}\\n' | grep",
			details = "apt-cache showpkg",
			install = "apt-get install",
			remove = "apt-get remove",
			no_orphans = "apt-get autoremove",
			update = "apt-get update; apt-get upgrade"
		},
		pacman = {
			search = "pacman -Ss",
			search_installed = "pacman -Qs",
			details = "pacman -Si",
			install = "pacman -S",
			remove = "pacman -Rs",
			no_orphans = {"pacman -Qtdq", "pacman -Rns"}, -- Pipe the first in the second
			update = "pacman -Suy"
		}
	},

	translations {
		pt_BR = {
			SelectedPackages = "Pacotes escolhidos: %s.",
			SearchTermNotProvided = "Você deve fornecer um termo inicial de busca:\n\n\t%s %s “termo de busca”\n",
			InfoHeading = "Pacote %s",
			Unsupported = "Este programa não funciona em seu sistema.",
			UnknownSubcommand = "Subcomando “%s” não reconhecido. Opções disponíveis:\n  - %s\n",
			Shortcuts = "Escolher: <Tab> | Confirmar: <Enter> | Detalhes: <Ctrl+D> | Sair: <Esc>"
		},
		en_US = {
			SelectedPackages = "Selected packages: %s.",
			SearchTermNotProvided = "You must provide an initial search term:\n\n\t%s %s “search term”\n",
			InfoHeading = "Package %s",
			Unsupported = "This program doesn't work on your system.",
			UnknownSubcommand = "Unknown subcommand “%s”. Available options:\n  - %s\n",
			Shortcuts = "Select: <Tab> | Confirm: <Enter> | Details: <Ctrl+D> | Quit: <Esc>"
		}
	}
}

if not program then
	io.stderr:write(tr"Unsupported")
	os.exit(1)
end

local subcommand = arg[1]

if not program[subcommand] then
	local keys = function(t)
		local keys = {}
		for k in pairs(t) do
			keys[#keys + 1] = k
		end
		return keys
	end

	io.stderr:write(tr("UnknownSubcommand", subcommand, table.concat(keys(program), "\n  - ")))
	os.exit(2)
end

program[subcommand](arg[2])
